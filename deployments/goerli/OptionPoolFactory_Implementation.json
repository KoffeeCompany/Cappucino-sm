{
  "address": "0x88E61D2989bc838EDbC275385831cB75539219b5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPokeMe",
          "name": "pokeMe_",
          "type": "address"
        },
        {
          "internalType": "contract IPokeMeResolver",
          "name": "pokeMeResolver_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "short",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "base",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeBeforeDeadLine",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bcv",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "OptionPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allOptions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "short_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "base_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strike_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeBeforeDeadLine_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bcv_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "createCallOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "option",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "getCallOptions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "short_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "base_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime_",
          "type": "uint256"
        }
      ],
      "name": "getSalt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pokeMe",
      "outputs": [
        {
          "internalType": "contract IPokeMe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pokeMeResolver",
      "outputs": [
        {
          "internalType": "contract IPokeMeResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x69cf0a9d6b74b4cad85094fccc70e96f3b3ebc6cf567799027baa1e94db65324",
  "receipt": {
    "to": null,
    "from": "0xF953c3d475dc0a9877329F71e2CE3d2519a519A2",
    "contractAddress": "0x88E61D2989bc838EDbC275385831cB75539219b5",
    "transactionIndex": 0,
    "gasUsed": "2860910",
    "logsBloom": "0x
    "blockHash": "0x91303064bd8b7ed593bc87b0da8f64419aba00ff68b4aec477537b380a6041c6",
    "transactionHash": "0x69cf0a9d6b74b4cad85094fccc70e96f3b3ebc6cf567799027baa1e94db65324",
    "logs": [],
    "blockNumber": 5987686,
    "cumulativeGasUsed": "2860910",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB3f5503f93d5Ef84b06993a1975B9D21B962892F",
    "0x2b3aA6F9b5B1535985786B4bF81FDC994f7BF9C3"
  ],
  "solcInputHash": "85c5547de572ec02e3d55f3b636dd9df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPokeMe\",\"name\":\"pokeMe_\",\"type\":\"address\"},{\"internalType\":\"contract IPokeMeResolver\",\"name\":\"pokeMeResolver_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"short\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"base\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeBeforeDeadLine\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bcv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTotalSupply\",\"type\":\"uint256\"}],\"name\":\"OptionPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allOptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"short_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"base_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeBeforeDeadLine_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bcv_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"createCallOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"getCallOptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"short_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"base_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime_\",\"type\":\"uint256\"}],\"name\":\"getSalt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pokeMe\",\"outputs\":[{\"internalType\":\"contract IPokeMe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pokeMeResolver\",\"outputs\":[{\"internalType\":\"contract IPokeMeResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OptionPoolFactory.sol\":\"OptionPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x45ed45e599d282187d4eb122e5b99e403f3d87853ba6c28a844702141d3fa587\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x046a0ed44997d20c6fac6fb186cb2ce8957a1b25497f713bc18c79db21e57dee\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/IPokeMeResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport {OptionCanSettle} from \\\"./structs/SOptionResolver.sol\\\";\\n\\ninterface IPokeMeResolver {\\n    function checker(\\n        OptionCanSettle memory optionCanSettle\\n    ) external view returns (bool, bytes memory);\\n}\\n\",\"keccak256\":\"0xd2ed3adec292a1a791e87b476c7749d44a2673dcccf6951de9f176c30ce2b3fa\",\"license\":\"GPL-2.0-or-later\"},\"contracts/OptionPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport {\\n    IERC20,\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {_wmul, _wdiv} from \\\"./vendor/DSMath.sol\\\";\\nimport {Options, Option} from \\\"./structs/SOption.sol\\\";\\nimport {OptionCanSettle} from \\\"./structs/SOptionResolver.sol\\\";\\nimport {IPokeMe} from \\\"./interfaces/IPokeMe.sol\\\";\\nimport {IOptionPoolFactory} from \\\"./interfaces/IOptionPoolFactory.sol\\\";\\nimport {IPokeMeResolver} from \\\"./IPokeMeResolver.sol\\\";\\n\\ncontract OptionPool is Ownable, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    //#region IMMUTABLE PROPERTIES\\n    IERC20 public short;\\n    IERC20 public base;\\n    uint256 public expiryTime;\\n    uint256 public strike;\\n    //#endregion IMMUTABLE PROPERTIES\\n\\n    uint256 public timeBeforeDeadLine;\\n    uint256 public bcv; // 18 decimal number\\n    IPokeMe public pokeMe;\\n    IPokeMeResolver public pokeMeResolver;\\n\\n    uint256 public debt; // Increase during creation / Decrease during exercise\\n    uint256 public debtRatio; //  Call Option Debt Outstanding / Total Supply\\n\\n    mapping(address => Options) public optionsByReceiver;\\n\\n    IOptionPoolFactory public optionPoolFactory;\\n\\n    //#region MODIFIERS\\n\\n    modifier deadLineBeforeExpiry(\\n        uint256 expiryTime_,\\n        uint256 timeBeforeDeadLine_\\n    ) {\\n        require(\\n            expiryTime_ > timeBeforeDeadLine_,\\n            \\\"OptionPool::initialize: timeBeforeDeadLine > expiryTime\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPokeMe() {\\n        require(\\n            msg.sender == address(pokeMe),\\n            \\\"OptionPool::onlyPokeMe: only pokeMe\\\"\\n        );\\n        _;\\n    }\\n\\n    //#endregion MODIFIERS\\n\\n    //#region Events\\n\\n    event LogOptionPool(\\n        address indexed pool,\\n        address short,\\n        address base,\\n        uint256 expiryTime,\\n        uint256 strike,\\n        uint256 timeBeforeDeadLine,\\n        uint256 bcv\\n    );\\n\\n    event LogCreateOption(\\n        address indexed pool,\\n        uint256 indexed id,\\n        address short,\\n        address base,\\n        uint256 notional,\\n        uint256 amountOut,\\n        uint256 premium\\n    );\\n\\n    event LogExerciseOption(\\n        address indexed pool,\\n        uint256 indexed id,\\n        uint256 amountIn\\n    );\\n\\n    event LogSettle(\\n        address indexed pool,\\n        uint256 indexed id,\\n        address receiver\\n    );\\n\\n    //#endregion Events\\n\\n    // !!!!!!!!!!!!! CONSTRUCTOR !!!!!!!!!!!!!!!!\\n\\n    constructor() Ownable() {\\n        optionPoolFactory = IOptionPoolFactory(msg.sender);\\n    }\\n\\n    // !!!!!!!!!!!!! CONSTRUCTOR !!!!!!!!!!!!!!!!\\n\\n    function initialize(\\n        IERC20 short_,\\n        IERC20 base_,\\n        uint256 expiryTime_,\\n        uint256 strike_,\\n        uint256 timeBeforeDeadLine_,\\n        uint256 bcv_,\\n        IPokeMe pokeMe_,\\n        IPokeMeResolver pokeMeResolver_\\n    )\\n        public\\n        initializer\\n        deadLineBeforeExpiry(expiryTime_, timeBeforeDeadLine_)\\n    {\\n        short = short_;\\n        base = base_;\\n        expiryTime = expiryTime_;\\n        strike = strike_;\\n        timeBeforeDeadLine = timeBeforeDeadLine_;\\n        bcv = bcv_;\\n        pokeMe = pokeMe_;\\n        pokeMeResolver = pokeMeResolver_;\\n\\n        emit LogOptionPool(\\n            address(this),\\n            address(short_),\\n            address(base_),\\n            expiryTime_,\\n            strike_,\\n            timeBeforeDeadLine_,\\n            bcv_\\n        );\\n    }\\n\\n    //#region ONLY ADMIN\\n\\n    function setTimeBeforeDeadLine(uint256 timeBeforeDeadLine_)\\n        external\\n        onlyOwner\\n        deadLineBeforeExpiry(expiryTime, timeBeforeDeadLine_)\\n    {\\n        timeBeforeDeadLine = timeBeforeDeadLine_;\\n    }\\n\\n    function setBCV(uint256 bcv_) external onlyOwner {\\n        bcv = bcv_;\\n    }\\n\\n    function increaseSupply(uint256 addend_) external onlyOwner {\\n        base.safeTransferFrom(msg.sender, address(this), addend_);\\n    }\\n\\n    //#endregion ONLY ADMIN\\n\\n    function getPrice(uint256 amount_) public view returns (uint256) {\\n        return _wmul(_wmul(bcv, debtRatio), amount_);\\n    }\\n\\n    //#region USER FUNCTIONS CREATE EXERCISE\\n\\n    function create(uint256 notional_, address receiver_) external {\\n        address pool = address(this);\\n        Options storage options = optionsByReceiver[receiver_];\\n\\n        Option memory option = Option({\\n            notional: notional_,\\n            receiver: receiver_,\\n            price: getPrice(notional_),\\n            startTime: block.timestamp,\\n            pokeMe: pokeMe.createTaskNoPrepayment(\\n                address(this),\\n                this.settle.selector,\\n                address(pokeMeResolver),\\n                abi.encodeWithSelector(\\n                    IPokeMeResolver.checker.selector,\\n                    OptionCanSettle({\\n                        pool: address(this),\\n                        receiver: receiver_,\\n                        id: options.opts.length\\n                    })\\n                ),\\n                address(short)\\n            ),\\n            settled: false\\n        });\\n\\n        options.opts.push(option);\\n        options.nextID = options.opts.length;\\n\\n        uint256 baseBalance = base.balanceOf(pool);\\n\\n        debt += notional_;\\n        debtRatio = _wdiv(debt, baseBalance);\\n\\n        require(debt <= baseBalance, \\\"OptionPool::create: debt > baseBalance.\\\");\\n\\n        uint256 balanceB = short.balanceOf(pool);\\n\\n        short.safeTransferFrom(msg.sender, pool, option.price);\\n\\n        assert(balanceB + option.price == short.balanceOf(pool));\\n\\n        emit LogCreateOption(\\n            pool,\\n            options.nextID,\\n            address(short),\\n            address(base),\\n            notional_,\\n            _wmul(strike, notional_),\\n            option.price\\n        );\\n    }\\n\\n    function exercise(uint256 id_) external {\\n        address pool = address(this);\\n        Options storage options = optionsByReceiver[msg.sender];\\n\\n        Option storage option = options.opts[id_];\\n\\n        require(!option.settled, \\\"OptionPool::exercise: already settled.\\\");\\n        option.settled = true;\\n\\n        require(\\n            option.startTime + expiryTime < block.timestamp,\\n            \\\"OptionPool::exercise: not expired.\\\"\\n        );\\n\\n        require(\\n            option.startTime + expiryTime + timeBeforeDeadLine >\\n                block.timestamp,\\n            \\\"OptionPool::exercise: deadline reached.\\\"\\n        );\\n\\n        debt -= option.notional;\\n        debtRatio = _wdiv(debt, base.balanceOf(pool) - option.notional);\\n        pokeMe.cancelTask(option.pokeMe);\\n\\n        uint256 balanceB = short.balanceOf(pool);\\n\\n        uint256 amountIn = _wmul(option.notional, strike);\\n\\n        short.safeTransferFrom(msg.sender, pool, amountIn);\\n        base.safeTransfer(msg.sender, option.notional);\\n\\n        assert(balanceB + amountIn == short.balanceOf(pool));\\n\\n        emit LogExerciseOption(pool, id_, amountIn);\\n    }\\n\\n    function settle(address receiver_, uint256 id_) public onlyPokeMe {\\n        Options storage options = optionsByReceiver[receiver_];\\n\\n        Option storage option = options.opts[id_];\\n\\n        require(!option.settled, \\\"OptionPool::exercise: already settled.\\\");\\n\\n        option.settled = true;\\n        pokeMe.cancelTask(option.pokeMe);\\n\\n        emit LogSettle(address(this), id_, receiver_);\\n    }\\n\\n    //#endregion USER FUNCTIONS CREATE EXERCISE\\n\\n    //#region VIEW FUNCTIONS\\n\\n    function getNextID(address receiver_) external view returns (uint256) {\\n        return optionsByReceiver[receiver_].nextID;\\n    }\\n\\n    function getOptionOfReceiver(address receiver_, uint256 id_)\\n        external\\n        view\\n        returns (Option memory)\\n    {\\n        return optionsByReceiver[receiver_].opts[id_];\\n    }\\n\\n    //#endregion VIEW FUNCTIONS\\n}\\n\",\"keccak256\":\"0x4310606dc26377d553559617569cd7e090632de734be71ac37cf9ed41591ecb4\",\"license\":\"MIT\"},\"contracts/OptionPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport {\\n    IERC20,\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IPokeMe} from \\\"./interfaces/IPokeMe.sol\\\";\\nimport {OptionPool} from \\\"./OptionPool.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {Proxied} from \\\"./vendor/hardhat-deploy/Proxied.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    PausableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {\\n    AddressUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {\\n    IPokeMeResolver\\n} from \\\"./IPokeMeResolver.sol\\\";\\n\\ncontract OptionPoolFactory is\\n    Initializable,\\n    Proxied,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    IPokeMe public immutable pokeMe;\\n    IPokeMeResolver public immutable pokeMeResolver;\\n\\n    mapping(bytes32 => address) public getCallOptions;\\n    address[] public allOptions;\\n\\n    event OptionPoolCreated(\\n        bytes32 salt,\\n        IERC20 indexed short,\\n        IERC20 indexed base,\\n        uint256 expiryTime,\\n        uint256 strike,\\n        uint256 timeBeforeDeadLine,\\n        uint256 bcv,\\n        uint256 initialTotalSupply\\n    );\\n\\n    constructor(IPokeMe pokeMe_, IPokeMeResolver pokeMeResolver_) {\\n        pokeMe = pokeMe_;\\n        pokeMeResolver = pokeMeResolver_;\\n    }\\n\\n    function createCallOption(\\n        IERC20 short_,\\n        IERC20 base_,\\n        uint256 expiryTime_,\\n        uint256 strike_,\\n        uint256 timeBeforeDeadLine_,\\n        uint256 bcv_,\\n        uint256 initialTotalSupply_\\n    ) external returns (address option) {\\n        require(\\n            short_ != base_,\\n            \\\"Cappucino::OptionFactory:: IDENTICAL_ADDRESSES\\\"\\n        );\\n        // (address token0, address token1) = tokenA < tokenB\\n        //     ? (tokenA, tokenB)\\n        //     : (tokenB, tokenA);\\n        bytes32 salt = getSalt(short_, base_, expiryTime_);\\n\\n        require(\\n            address(short_) != address(0),\\n            \\\"Cappucino::OptionFactory:: short token ZERO_ADDRESS\\\"\\n        );\\n        require(\\n            address(base_) != address(0),\\n            \\\"Cappucino::OptionFactory:: base token ZERO_ADDRESS\\\"\\n        );\\n        require(\\n            getCallOptions[salt] == address(0),\\n            \\\"Cappucino::OptionFactory:: PAIR_EXISTS\\\"\\n        ); // single check is sufficient\\n        bytes memory bytecode = type(OptionPool).creationCode;\\n        assembly {\\n            option := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        OptionPool(option).initialize(\\n            short_,\\n            base_,\\n            expiryTime_,\\n            strike_,\\n            timeBeforeDeadLine_,\\n            bcv_,\\n            pokeMe,\\n            pokeMeResolver\\n        );\\n        OptionPool(option).transferOwnership(msg.sender);\\n        getCallOptions[salt] = option;\\n        allOptions.push(option);\\n\\n        base_.safeTransferFrom(msg.sender, address(this), initialTotalSupply_);\\n        base_.safeTransfer(option, initialTotalSupply_);\\n        emit OptionPoolCreated(\\n            salt,\\n            short_,\\n            base_,\\n            expiryTime_,\\n            strike_,\\n            timeBeforeDeadLine_,\\n            bcv_,\\n            initialTotalSupply_\\n        );\\n    }\\n\\n    function getSalt(\\n        IERC20 short_,\\n        IERC20 base_,\\n        uint256 expiryTime_\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(short_, base_, expiryTime_));\\n    }\\n}\\n\",\"keccak256\":\"0x39374165696a1eb8d33cd1ce138db061ef07df1e0c18a548532b444d6c5749e4\",\"license\":\"MIT\"},\"contracts/interfaces/IOptionPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\nimport {IPokeMe} from \\\"../interfaces/IPokeMe.sol\\\";\\n\\ninterface IOptionPoolFactory {\\n    function pokeMe() external view returns (IPokeMe);\\n}\",\"keccak256\":\"0x230e3c414091bc41f7724919b08f834b94bcc14a2a7c2a4dc9ebcc4eb5cb74b6\",\"license\":\"MIT\"},\"contracts/interfaces/IPokeMe.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\ninterface IPokeMe {\\n    function createTaskNoPrepayment(\\n        address execAddress_,\\n        bytes4 execSelector_,\\n        address resolverAddress_,\\n        bytes calldata resolverData_,\\n        address feeToken_\\n    ) external returns (bytes32 task);\\n\\n    function cancelTask(bytes32 taskId_) external;\\n\\n    function getFeeDetails() external view returns (uint256, address);\\n\\n    function getResolverHash(\\n        address _resolverAddress,\\n        bytes memory _resolverData\\n    ) external pure returns (bytes32);\\n\\n    function exec(\\n        uint256 _txFee,\\n        address _feeToken,\\n        address _taskCreator,\\n        bool _useTaskTreasuryFunds,\\n        bytes32  _resolverHash,\\n        address _execAddress,\\n        bytes calldata _execData\\n    ) external;\\n}\",\"keccak256\":\"0x5440001811bb31df9dc2e294852264abd9990fae9958f27bf7a55cca8af4ff16\",\"license\":\"GPL-2.0-or-later\"},\"contracts/structs/SOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nstruct Options {\\n    uint256 nextID;\\n    Option[] opts;\\n}\\n\\nstruct Option {\\n    uint256 notional;\\n    address receiver;\\n    uint256 price;\\n    uint256 startTime;\\n    bytes32 pokeMe;\\n    bool settled;\\n}\\n\",\"keccak256\":\"0xa440e850cf6c2d03a64fd129496614328aed308480f7f4e5372f607354948c11\",\"license\":\"MIT\"},\"contracts/structs/SOptionResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nstruct OptionCanSettle {\\n    address pool;\\n    address receiver;\\n    uint256 id;\\n}\",\"keccak256\":\"0x9891abbb0956d83f0a9a307542c02d4c604194aa9ec411b7fdcdf58e1f0e3d26\",\"license\":\"MIT\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n// solhint-disable\\nfunction _add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction _sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction _mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction _min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction _max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction _imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction _imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\nuint256 constant QUA = 10**4;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction _wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = _add(_mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction _rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = _add(_mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction _wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = _add(_mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction _rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = _add(_mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction _rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = _rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = _rmul(z, x);\\n        }\\n    }\\n}\\n\\n//rounds to zero if x*y < QUA / 2\\nfunction _qmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = _add(_mul(x, y), QUA / 2) / QUA;\\n}\\n\\n//rounds to zero if x*y < QUA / 2\\nfunction _qdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = _add(_mul(x, QUA), y / 2) / y;\\n}\\n\",\"keccak256\":\"0xe23560101f2da2f5463bc986dd0c3c9d902067db0e4697e2dfde6413df22ac2b\",\"license\":\"MIT\"},\"contracts/vendor/hardhat-deploy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7dff3cb2c0e1e9ae2b1aa4c103fabbe86f542fb09023658b89738af3b42ce4a4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161340438038061340483398101604081905261002f9161004d565b6001600160601b0319606092831b8116608052911b1660a05261009f565b6000806040838503121561006057600080fd5b825161006b81610087565b602084015190925061007c81610087565b809150509250929050565b6001600160a01b038116811461009c57600080fd5b50565b60805160601c60a05160601c61332c6100d86000396000818161016b01526105710152600081816101440152610549015261332c6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638ea745b81161005b5780638ea745b8146100f6578063a586980f14610109578063c84eee0d1461013f578063fdb36f371461016657600080fd5b806327733e60146100825780635c975abb146100a85780638cc8b7c5146100be575b600080fd5b610095610090366004610c6e565b61018d565b6040519081526020015b60405180910390f35b60655460ff16604051901515815260200161009f565b6100d16100cc366004610caa565b6101e4565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b6100d1610104366004610c55565b610793565b6100d1610117366004610c55565b60976020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6040805173ffffffffffffffffffffffffffffffffffffffff8086166020830152841691810191909152606081018290526000906080016040516020818303038152906040528051906020012090505b9392505050565b60008673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614156102a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f436170707563696e6f3a3a4f7074696f6e466163746f72793a3a204944454e5460448201527f4943414c5f41444452455353455300000000000000000000000000000000000060648201526084015b60405180910390fd5b60006102b489898961018d565b905073ffffffffffffffffffffffffffffffffffffffff8916610359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f436170707563696e6f3a3a4f7074696f6e466163746f72793a3a2073686f727460448201527f20746f6b656e205a45524f5f4144445245535300000000000000000000000000606482015260840161029e565b73ffffffffffffffffffffffffffffffffffffffff88166103fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f436170707563696e6f3a3a4f7074696f6e466163746f72793a3a20626173652060448201527f746f6b656e205a45524f5f414444524553530000000000000000000000000000606482015260840161029e565b60008181526097602052604090205473ffffffffffffffffffffffffffffffffffffffff16156104ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f436170707563696e6f3a3a4f7074696f6e466163746f72793a3a20504149525f60448201527f4558495354530000000000000000000000000000000000000000000000000000606482015260840161029e565b6000604051806020016104c090610bfd565b6020820181038252601f19601f820116604052509050818151602083016000f56040517f493292ef00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c811660048301528b81166024830152604482018b9052606482018a90526084820189905260a482018890527f0000000000000000000000000000000000000000000000000000000000000000811660c48301527f0000000000000000000000000000000000000000000000000000000000000000811660e48301529194509084169063493292ef9061010401600060405180830381600087803b1580156105c257600080fd5b505af11580156105d6573d6000803e3d6000fd5b50506040517ff2fde38b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8616925063f2fde38b9150602401600060405180830381600087803b15801561064157600080fd5b505af1158015610655573d6000803e3d6000fd5b5050506000838152609760205260408120805473ffffffffffffffffffffffffffffffffffffffff8088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556098805460018101825594527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d814909301805490911690911790556106f291508a163330876107ca565b61071373ffffffffffffffffffffffffffffffffffffffff8a1684866108ac565b60408051838152602081018a9052908101889052606081018790526080810186905260a0810185905273ffffffffffffffffffffffffffffffffffffffff808b1691908c16907fbbcf3497f979b35fe6aa0d3b48853e12c7882f9f7dd46a123ae59384c3dbdd529060c00160405180910390a35050979650505050505050565b609881815481106107a357600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526108a69085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610907565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526109029084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610824565b505050565b6000610969826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a139092919063ffffffff16565b80519091501561090257808060200190518101906109879190610c33565b610902576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161029e565b6060610a228484600085610a2a565b949350505050565b606082471015610abc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161029e565b843b610b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161029e565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b4d9190610d08565b60006040518083038185875af1925050503d8060008114610b8a576040519150601f19603f3d011682016040523d82523d6000602084013e610b8f565b606091505b5091509150610b9f828286610baa565b979650505050505050565b60608315610bb95750816101dd565b825115610bc95782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029e9190610d24565b61255580610da283390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c2e57600080fd5b919050565b600060208284031215610c4557600080fd5b815180151581146101dd57600080fd5b600060208284031215610c6757600080fd5b5035919050565b600080600060608486031215610c8357600080fd5b610c8c84610c0a565b9250610c9a60208501610c0a565b9150604084013590509250925092565b600080600080600080600060e0888a031215610cc557600080fd5b610cce88610c0a565b9650610cdc60208901610c0a565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b60008251610d1a818460208701610d75565b9190910192915050565b6020815260008251806020840152610d43816040850160208701610d75565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60005b83811015610d90578181015183820152602001610d78565b838111156108a6575050600091015256fe608060405234801561001057600080fd5b5061001a33610031565b600c80546001600160a01b03191633179055610081565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6124c5806100906000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c806399bc0aea116100ee578063c84eee0d11610097578063f01fe69211610071578063f01fe69214610399578063f2fde38b146103ac578063fd7dc99a146103bf578063fdb36f371461043657600080fd5b8063c84eee0d1461035d578063cea55f571461037d578063e75722301461038657600080fd5b8063b921e163116100c8578063b921e163146102f4578063bebf72c314610307578063c26923bc1461032757600080fd5b806399bc0aea146102cf578063ad8f5008146102d8578063b07f0a41146102e157600080fd5b80636c60a1f8116101505780637daafb921161012a5780637daafb92146102955780638da5cb5b146102a857806397cae24d146102c657600080fd5b80636c60a1f81461026457806370578c251461026d578063715018a61461028d57600080fd5b8063493292ef11610181578063493292ef1461021e5780635001f3b51461023157806363fd49981461025157600080fd5b80630dca59c1146101a857806315afd409146101c457806338bea4cb146101d9575b600080fd5b6101b160095481565b6040519081526020015b60405180910390f35b6101d76101d23660046120ea565b610456565b005b6001546101f99073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bb565b6101d761022c366004612151565b6106ef565b6002546101f99073ffffffffffffffffffffffffffffffffffffffff1681565b6101d761025f3660046121d6565b6109d3565b6101b160055481565b600c546101f99073ffffffffffffffffffffffffffffffffffffffff1681565b6101d7610a59565b6101d76102a33660046121d6565b610ae6565b60005473ffffffffffffffffffffffffffffffffffffffff166101f9565b6101b160065481565b6101b160035481565b6101b160045481565b6101d76102ef3660046121d6565b610c01565b6101d76103023660046121d6565b6111c8565b6101b16103153660046120cd565b600b6020526000908152604090205481565b6101b16103353660046120cd565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b6007546101f99073ffffffffffffffffffffffffffffffffffffffff1681565b6101b1600a5481565b6101b16103943660046121d6565b611271565b6101d76103a73660046121ef565b611290565b6101d76103ba3660046120cd565b6118b2565b6103d26103cd3660046120ea565b6119df565b6040516101bb9190600060c0820190508251825273ffffffffffffffffffffffffffffffffffffffff602084015116602083015260408301516040830152606083015160608301526080830151608083015260a0830151151560a083015292915050565b6008546101f99073ffffffffffffffffffffffffffffffffffffffff1681565b60075473ffffffffffffffffffffffffffffffffffffffff163314610502576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4f7074696f6e506f6f6c3a3a6f6e6c79506f6b654d653a206f6e6c7920706f6b60448201527f654d65000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b60205260408120600181018054919291849081106105405761054061243e565b60009182526020909120600690910201600581015490915060ff16156105e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f7074696f6e506f6f6c3a3a65786572636973653a20616c726561647920736560448201527f74746c65642e000000000000000000000000000000000000000000000000000060648201526084016104f9565b6005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556007546004808301546040517fee8ca3b50000000000000000000000000000000000000000000000000000000081529182015273ffffffffffffffffffffffffffffffffffffffff9091169063ee8ca3b590602401600060405180830381600087803b15801561068457600080fd5b505af1158015610698573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff871681528592503091507f9c74ef90c213472ba140e05bddffd943f46c1263de77366f7e551ee4b27731899060200160405180910390a350505050565b6000547501000000000000000000000000000000000000000000900460ff1680610734575060005474010000000000000000000000000000000000000000900460ff16155b6107c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f9565b6000547501000000000000000000000000000000000000000000900460ff1615801561082757600080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1675010100000000000000000000000000000000000000001790555b86858082116108b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f4f7074696f6e506f6f6c3a3a696e697469616c697a653a2074696d654265666f60448201527f7265446561644c696e65203e2065787069727954696d6500000000000000000060648201526084016104f9565b600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8e81169182179093556002805483168e851690811790915560038d905560048c905560058b905560068a90556007805484168a861617905560088054909316938816939093179091556040805191825260208201929092529081018a9052606081018990526080810188905260a0810187905230907f83bdbbd2463851b359a1e7449968fb468fb63edf6d856140fb535e9cc53ddaa89060c00160405180910390a2505080156109c857600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1690555b505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b600655565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ada576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b610ae46000611abf565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b60035481808211610bfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f4f7074696f6e506f6f6c3a3a696e697469616c697a653a2074696d654265666f60448201527f7265446561644c696e65203e2065787069727954696d6500000000000000000060648201526084016104f9565b5050600555565b336000908152600b602052604081206001810180543093919085908110610c2a57610c2a61243e565b60009182526020909120600690910201600581015490915060ff1615610cd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f7074696f6e506f6f6c3a3a65786572636973653a20616c726561647920736560448201527f74746c65642e000000000000000000000000000000000000000000000000000060648201526084016104f9565b6005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560038054908201544291610d129161230d565b10610d9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4f7074696f6e506f6f6c3a3a65786572636973653a206e6f742065787069726560448201527f642e00000000000000000000000000000000000000000000000000000000000060648201526084016104f9565b426005546003548360030154610db5919061230d565b610dbf919061230d565b11610e4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4f7074696f6e506f6f6c3a3a65786572636973653a20646561646c696e65207260448201527f6561636865642e0000000000000000000000000000000000000000000000000060648201526084016104f9565b805460098054600090610e6090849061239d565b909155505060095481546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152610f2094939216906370a082319060240160206040518083038186803b158015610ed957600080fd5b505afa158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f119190612138565b610f1b919061239d565b611b34565b600a556007546004828101546040517fee8ca3b50000000000000000000000000000000000000000000000000000000081529182015273ffffffffffffffffffffffffffffffffffffffff9091169063ee8ca3b590602401600060405180830381600087803b158015610f9257600080fd5b505af1158015610fa6573d6000803e3d6000fd5b50506001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301526000945090911691506370a082319060240160206040518083038186803b15801561101857600080fd5b505afa15801561102c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110509190612138565b905060006110648360000154600454611b6d565b60015490915061108c9073ffffffffffffffffffffffffffffffffffffffff16338784611b98565b82546002546110b59173ffffffffffffffffffffffffffffffffffffffff909116903390611c7a565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906370a082319060240160206040518083038186803b15801561112057600080fd5b505afa158015611134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111589190612138565b611162828461230d565b1461116f5761116f6123e0565b858573ffffffffffffffffffffffffffffffffffffffff167f605408bbf995c7e81c5895008927eca580ac955d515a5e25fe1a24f38ab71ccd836040516111b891815260200190565b60405180910390a3505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b60025461126e9073ffffffffffffffffffffffffffffffffffffffff16333084611b98565b50565b600061128a611284600654600a54611b6d565b83611b6d565b92915050565b73ffffffffffffffffffffffffffffffffffffffff81166000818152600b60209081526040808320815160c08101835287815292830194909452309392919081016112da87611271565b815242602080830191909152600754600854604080516060810182523080825273ffffffffffffffffffffffffffffffffffffffff8c811683880190815260018c8101549486019485528551602481018590529151831660448301529351606480830191909152855180830390910181526084909101855296870180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fd792128300000000000000000000000000000000000000000000000000000000179052915483517fb9f45adb00000000000000000000000000000000000000000000000000000000815293909701969482169563b9f45adb956114089592947f15afd4090000000000000000000000000000000000000000000000000000000094938416939190911690600401612285565b602060405180830381600087803b15801561142257600080fd5b505af1158015611436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145a9190612138565b81526000602091820181905260018581018054808301825581845284842086516006909202019081559385015191840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff93841617905560408086015160028087019190915560608701516003870155608087015160048088019190915560a0880151600590970180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169715159790971790965591548855905490517f70a0823100000000000000000000000000000000000000000000000000000000815288831694810194909452939450909216906370a082319060240160206040518083038186803b15801561158557600080fd5b505afa158015611599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bd9190612138565b905085600960008282546115d1919061230d565b90915550506009546115e39082611b34565b600a55600954811015611678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4f7074696f6e506f6f6c3a3a6372656174653a2064656274203e20626173654260448201527f616c616e63652e0000000000000000000000000000000000000000000000000060648201526084016104f9565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015260009216906370a082319060240160206040518083038186803b1580156116e457600080fd5b505afa1580156116f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171c9190612138565b604084015160015491925061174b9173ffffffffffffffffffffffffffffffffffffffff169033908890611b98565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906370a082319060240160206040518083038186803b1580156117b657600080fd5b505afa1580156117ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ee9190612138565b60408401516117fd908361230d565b1461180a5761180a6123e0565b835460015460025460045473ffffffffffffffffffffffffffffffffffffffff808a16937fc76647022316890f154f65d2157a9979f95d8755283e95df588b0690a257b9a593908216929116908c906118639082611b6d565b6040808b0151815173ffffffffffffffffffffffffffffffffffffffff96871681529590941660208601528401919091526060830152608082015260a00160405180910390a350505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b73ffffffffffffffffffffffffffffffffffffffff81166119d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104f9565b61126e81611abf565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905273ffffffffffffffffffffffffffffffffffffffff86168252600b905291909120600101805483908110611a4757611a4761243e565b60009182526020918290206040805160c081018252600690930290910180548352600181015473ffffffffffffffffffffffffffffffffffffffff1693830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152905092915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081611b5c611b4c85670de0b6b3a7640000611cd5565b611b57600286612325565b611d5f565b611b669190612325565b9392505050565b6000670de0b6b3a7640000611b5c611b858585611cd5565b611b576002670de0b6b3a7640000612325565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611c749085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611dd7565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611cd09084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611bf2565b505050565b6000811580611cf957508282611ceb8183612360565b9250611cf79083612325565b145b61128a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f7700000000000000000000000060448201526064016104f9565b600082611d6c838261230d565b915081101561128a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000060448201526064016104f9565b6000611e39826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ee39092919063ffffffff16565b805190915015611cd05780806020019051810190611e579190612116565b611cd0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104f9565b6060611ef28484600085611efa565b949350505050565b606082471015611f8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104f9565b843b611ff4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f9565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161201d9190612269565b60006040518083038185875af1925050503d806000811461205a576040519150601f19603f3d011682016040523d82523d6000602084013e61205f565b606091505b509150915061206f82828661207a565b979650505050505050565b60608315612089575081611b66565b8251156120995782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f991906122fa565b6000602082840312156120df57600080fd5b8135611b668161246d565b600080604083850312156120fd57600080fd5b82356121088161246d565b946020939093013593505050565b60006020828403121561212857600080fd5b81518015158114611b6657600080fd5b60006020828403121561214a57600080fd5b5051919050565b600080600080600080600080610100898b03121561216e57600080fd5b88356121798161246d565b975060208901356121898161246d565b965060408901359550606089013594506080890135935060a0890135925060c08901356121b58161246d565b915060e08901356121c58161246d565b809150509295985092959890939650565b6000602082840312156121e857600080fd5b5035919050565b6000806040838503121561220257600080fd5b8235915060208301356122148161246d565b809150509250929050565b600081518084526122378160208601602086016123b4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161227b8184602087016123b4565b9190910192915050565b600073ffffffffffffffffffffffffffffffffffffffff80881683527fffffffff0000000000000000000000000000000000000000000000000000000087166020840152808616604084015260a060608401526122e560a084018661221f565b91508084166080840152509695505050505050565b602081526000611b66602083018461221f565b600082198211156123205761232061240f565b500190565b60008261235b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156123985761239861240f565b500290565b6000828210156123af576123af61240f565b500390565b60005b838110156123cf5781810151838201526020016123b7565b83811115611c745750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461126e57600080fdfea264697066735822122075aeadc8eb5cb0165fcd9f5e53491d597d70f602565d3de2a4a6e0f4fdbf1b0564736f6c63430008070033a264697066735822122072b589f1785de4598b1aa33e73868382ef0a485ec943b943e8bdf64fba336ec364736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638ea745b81161005b5780638ea745b8146100f6578063a586980f14610109578063c84eee0d1461013f578063fdb36f371461016657600080fd5b806327733e60146100825780635c975abb146100a85780638cc8b7c5146100be575b600080fd5b610095610090366004610c6e565b61018d565b6040519081526020015b60405180910390f35b60655460ff16604051901515815260200161009f565b6100d16100cc366004610caa565b6101e4565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b6100d1610104366004610c55565b610793565b6100d1610117366004610c55565b60976020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6040805173ffffffffffffffffffffffffffffffffffffffff8086166020830152841691810191909152606081018290526000906080016040516020818303038152906040528051906020012090505b9392505050565b60008673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614156102a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f436170707563696e6f3a3a4f7074696f6e466163746f72793a3a204944454e5460448201527f4943414c5f41444452455353455300000000000000000000000000000000000060648201526084015b60405180910390fd5b60006102b489898961018d565b905073ffffffffffffffffffffffffffffffffffffffff8916610359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f436170707563696e6f3a3a4f7074696f6e466163746f72793a3a2073686f727460448201527f20746f6b656e205a45524f5f4144445245535300000000000000000000000000606482015260840161029e565b73ffffffffffffffffffffffffffffffffffffffff88166103fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f436170707563696e6f3a3a4f7074696f6e466163746f72793a3a20626173652060448201527f746f6b656e205a45524f5f414444524553530000000000000000000000000000606482015260840161029e565b60008181526097602052604090205473ffffffffffffffffffffffffffffffffffffffff16156104ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f436170707563696e6f3a3a4f7074696f6e466163746f72793a3a20504149525f60448201527f4558495354530000000000000000000000000000000000000000000000000000606482015260840161029e565b6000604051806020016104c090610bfd565b6020820181038252601f19601f820116604052509050818151602083016000f56040517f493292ef00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c811660048301528b81166024830152604482018b9052606482018a90526084820189905260a482018890527f0000000000000000000000000000000000000000000000000000000000000000811660c48301527f0000000000000000000000000000000000000000000000000000000000000000811660e48301529194509084169063493292ef9061010401600060405180830381600087803b1580156105c257600080fd5b505af11580156105d6573d6000803e3d6000fd5b50506040517ff2fde38b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8616925063f2fde38b9150602401600060405180830381600087803b15801561064157600080fd5b505af1158015610655573d6000803e3d6000fd5b5050506000838152609760205260408120805473ffffffffffffffffffffffffffffffffffffffff8088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556098805460018101825594527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d814909301805490911690911790556106f291508a163330876107ca565b61071373ffffffffffffffffffffffffffffffffffffffff8a1684866108ac565b60408051838152602081018a9052908101889052606081018790526080810186905260a0810185905273ffffffffffffffffffffffffffffffffffffffff808b1691908c16907fbbcf3497f979b35fe6aa0d3b48853e12c7882f9f7dd46a123ae59384c3dbdd529060c00160405180910390a35050979650505050505050565b609881815481106107a357600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526108a69085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610907565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526109029084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610824565b505050565b6000610969826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a139092919063ffffffff16565b80519091501561090257808060200190518101906109879190610c33565b610902576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161029e565b6060610a228484600085610a2a565b949350505050565b606082471015610abc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161029e565b843b610b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161029e565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b4d9190610d08565b60006040518083038185875af1925050503d8060008114610b8a576040519150601f19603f3d011682016040523d82523d6000602084013e610b8f565b606091505b5091509150610b9f828286610baa565b979650505050505050565b60608315610bb95750816101dd565b825115610bc95782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029e9190610d24565b61255580610da283390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c2e57600080fd5b919050565b600060208284031215610c4557600080fd5b815180151581146101dd57600080fd5b600060208284031215610c6757600080fd5b5035919050565b600080600060608486031215610c8357600080fd5b610c8c84610c0a565b9250610c9a60208501610c0a565b9150604084013590509250925092565b600080600080600080600060e0888a031215610cc557600080fd5b610cce88610c0a565b9650610cdc60208901610c0a565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b60008251610d1a818460208701610d75565b9190910192915050565b6020815260008251806020840152610d43816040850160208701610d75565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60005b83811015610d90578181015183820152602001610d78565b838111156108a6575050600091015256fe608060405234801561001057600080fd5b5061001a33610031565b600c80546001600160a01b03191633179055610081565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6124c5806100906000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c806399bc0aea116100ee578063c84eee0d11610097578063f01fe69211610071578063f01fe69214610399578063f2fde38b146103ac578063fd7dc99a146103bf578063fdb36f371461043657600080fd5b8063c84eee0d1461035d578063cea55f571461037d578063e75722301461038657600080fd5b8063b921e163116100c8578063b921e163146102f4578063bebf72c314610307578063c26923bc1461032757600080fd5b806399bc0aea146102cf578063ad8f5008146102d8578063b07f0a41146102e157600080fd5b80636c60a1f8116101505780637daafb921161012a5780637daafb92146102955780638da5cb5b146102a857806397cae24d146102c657600080fd5b80636c60a1f81461026457806370578c251461026d578063715018a61461028d57600080fd5b8063493292ef11610181578063493292ef1461021e5780635001f3b51461023157806363fd49981461025157600080fd5b80630dca59c1146101a857806315afd409146101c457806338bea4cb146101d9575b600080fd5b6101b160095481565b6040519081526020015b60405180910390f35b6101d76101d23660046120ea565b610456565b005b6001546101f99073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bb565b6101d761022c366004612151565b6106ef565b6002546101f99073ffffffffffffffffffffffffffffffffffffffff1681565b6101d761025f3660046121d6565b6109d3565b6101b160055481565b600c546101f99073ffffffffffffffffffffffffffffffffffffffff1681565b6101d7610a59565b6101d76102a33660046121d6565b610ae6565b60005473ffffffffffffffffffffffffffffffffffffffff166101f9565b6101b160065481565b6101b160035481565b6101b160045481565b6101d76102ef3660046121d6565b610c01565b6101d76103023660046121d6565b6111c8565b6101b16103153660046120cd565b600b6020526000908152604090205481565b6101b16103353660046120cd565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b6007546101f99073ffffffffffffffffffffffffffffffffffffffff1681565b6101b1600a5481565b6101b16103943660046121d6565b611271565b6101d76103a73660046121ef565b611290565b6101d76103ba3660046120cd565b6118b2565b6103d26103cd3660046120ea565b6119df565b6040516101bb9190600060c0820190508251825273ffffffffffffffffffffffffffffffffffffffff602084015116602083015260408301516040830152606083015160608301526080830151608083015260a0830151151560a083015292915050565b6008546101f99073ffffffffffffffffffffffffffffffffffffffff1681565b60075473ffffffffffffffffffffffffffffffffffffffff163314610502576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4f7074696f6e506f6f6c3a3a6f6e6c79506f6b654d653a206f6e6c7920706f6b60448201527f654d65000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b60205260408120600181018054919291849081106105405761054061243e565b60009182526020909120600690910201600581015490915060ff16156105e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f7074696f6e506f6f6c3a3a65786572636973653a20616c726561647920736560448201527f74746c65642e000000000000000000000000000000000000000000000000000060648201526084016104f9565b6005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556007546004808301546040517fee8ca3b50000000000000000000000000000000000000000000000000000000081529182015273ffffffffffffffffffffffffffffffffffffffff9091169063ee8ca3b590602401600060405180830381600087803b15801561068457600080fd5b505af1158015610698573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff871681528592503091507f9c74ef90c213472ba140e05bddffd943f46c1263de77366f7e551ee4b27731899060200160405180910390a350505050565b6000547501000000000000000000000000000000000000000000900460ff1680610734575060005474010000000000000000000000000000000000000000900460ff16155b6107c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f9565b6000547501000000000000000000000000000000000000000000900460ff1615801561082757600080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1675010100000000000000000000000000000000000000001790555b86858082116108b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f4f7074696f6e506f6f6c3a3a696e697469616c697a653a2074696d654265666f60448201527f7265446561644c696e65203e2065787069727954696d6500000000000000000060648201526084016104f9565b600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8e81169182179093556002805483168e851690811790915560038d905560048c905560058b905560068a90556007805484168a861617905560088054909316938816939093179091556040805191825260208201929092529081018a9052606081018990526080810188905260a0810187905230907f83bdbbd2463851b359a1e7449968fb468fb63edf6d856140fb535e9cc53ddaa89060c00160405180910390a2505080156109c857600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1690555b505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b600655565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ada576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b610ae46000611abf565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b60035481808211610bfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f4f7074696f6e506f6f6c3a3a696e697469616c697a653a2074696d654265666f60448201527f7265446561644c696e65203e2065787069727954696d6500000000000000000060648201526084016104f9565b5050600555565b336000908152600b602052604081206001810180543093919085908110610c2a57610c2a61243e565b60009182526020909120600690910201600581015490915060ff1615610cd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f7074696f6e506f6f6c3a3a65786572636973653a20616c726561647920736560448201527f74746c65642e000000000000000000000000000000000000000000000000000060648201526084016104f9565b6005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560038054908201544291610d129161230d565b10610d9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4f7074696f6e506f6f6c3a3a65786572636973653a206e6f742065787069726560448201527f642e00000000000000000000000000000000000000000000000000000000000060648201526084016104f9565b426005546003548360030154610db5919061230d565b610dbf919061230d565b11610e4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4f7074696f6e506f6f6c3a3a65786572636973653a20646561646c696e65207260448201527f6561636865642e0000000000000000000000000000000000000000000000000060648201526084016104f9565b805460098054600090610e6090849061239d565b909155505060095481546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152610f2094939216906370a082319060240160206040518083038186803b158015610ed957600080fd5b505afa158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f119190612138565b610f1b919061239d565b611b34565b600a556007546004828101546040517fee8ca3b50000000000000000000000000000000000000000000000000000000081529182015273ffffffffffffffffffffffffffffffffffffffff9091169063ee8ca3b590602401600060405180830381600087803b158015610f9257600080fd5b505af1158015610fa6573d6000803e3d6000fd5b50506001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301526000945090911691506370a082319060240160206040518083038186803b15801561101857600080fd5b505afa15801561102c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110509190612138565b905060006110648360000154600454611b6d565b60015490915061108c9073ffffffffffffffffffffffffffffffffffffffff16338784611b98565b82546002546110b59173ffffffffffffffffffffffffffffffffffffffff909116903390611c7a565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906370a082319060240160206040518083038186803b15801561112057600080fd5b505afa158015611134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111589190612138565b611162828461230d565b1461116f5761116f6123e0565b858573ffffffffffffffffffffffffffffffffffffffff167f605408bbf995c7e81c5895008927eca580ac955d515a5e25fe1a24f38ab71ccd836040516111b891815260200190565b60405180910390a3505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b60025461126e9073ffffffffffffffffffffffffffffffffffffffff16333084611b98565b50565b600061128a611284600654600a54611b6d565b83611b6d565b92915050565b73ffffffffffffffffffffffffffffffffffffffff81166000818152600b60209081526040808320815160c08101835287815292830194909452309392919081016112da87611271565b815242602080830191909152600754600854604080516060810182523080825273ffffffffffffffffffffffffffffffffffffffff8c811683880190815260018c8101549486019485528551602481018590529151831660448301529351606480830191909152855180830390910181526084909101855296870180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fd792128300000000000000000000000000000000000000000000000000000000179052915483517fb9f45adb00000000000000000000000000000000000000000000000000000000815293909701969482169563b9f45adb956114089592947f15afd4090000000000000000000000000000000000000000000000000000000094938416939190911690600401612285565b602060405180830381600087803b15801561142257600080fd5b505af1158015611436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145a9190612138565b81526000602091820181905260018581018054808301825581845284842086516006909202019081559385015191840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff93841617905560408086015160028087019190915560608701516003870155608087015160048088019190915560a0880151600590970180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169715159790971790965591548855905490517f70a0823100000000000000000000000000000000000000000000000000000000815288831694810194909452939450909216906370a082319060240160206040518083038186803b15801561158557600080fd5b505afa158015611599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bd9190612138565b905085600960008282546115d1919061230d565b90915550506009546115e39082611b34565b600a55600954811015611678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4f7074696f6e506f6f6c3a3a6372656174653a2064656274203e20626173654260448201527f616c616e63652e0000000000000000000000000000000000000000000000000060648201526084016104f9565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015260009216906370a082319060240160206040518083038186803b1580156116e457600080fd5b505afa1580156116f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171c9190612138565b604084015160015491925061174b9173ffffffffffffffffffffffffffffffffffffffff169033908890611b98565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906370a082319060240160206040518083038186803b1580156117b657600080fd5b505afa1580156117ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ee9190612138565b60408401516117fd908361230d565b1461180a5761180a6123e0565b835460015460025460045473ffffffffffffffffffffffffffffffffffffffff808a16937fc76647022316890f154f65d2157a9979f95d8755283e95df588b0690a257b9a593908216929116908c906118639082611b6d565b6040808b0151815173ffffffffffffffffffffffffffffffffffffffff96871681529590941660208601528401919091526060830152608082015260a00160405180910390a350505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f9565b73ffffffffffffffffffffffffffffffffffffffff81166119d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104f9565b61126e81611abf565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905273ffffffffffffffffffffffffffffffffffffffff86168252600b905291909120600101805483908110611a4757611a4761243e565b60009182526020918290206040805160c081018252600690930290910180548352600181015473ffffffffffffffffffffffffffffffffffffffff1693830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff16151560a0820152905092915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081611b5c611b4c85670de0b6b3a7640000611cd5565b611b57600286612325565b611d5f565b611b669190612325565b9392505050565b6000670de0b6b3a7640000611b5c611b858585611cd5565b611b576002670de0b6b3a7640000612325565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611c749085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611dd7565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611cd09084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611bf2565b505050565b6000811580611cf957508282611ceb8183612360565b9250611cf79083612325565b145b61128a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f7700000000000000000000000060448201526064016104f9565b600082611d6c838261230d565b915081101561128a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000060448201526064016104f9565b6000611e39826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ee39092919063ffffffff16565b805190915015611cd05780806020019051810190611e579190612116565b611cd0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104f9565b6060611ef28484600085611efa565b949350505050565b606082471015611f8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104f9565b843b611ff4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f9565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161201d9190612269565b60006040518083038185875af1925050503d806000811461205a576040519150601f19603f3d011682016040523d82523d6000602084013e61205f565b606091505b509150915061206f82828661207a565b979650505050505050565b60608315612089575081611b66565b8251156120995782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f991906122fa565b6000602082840312156120df57600080fd5b8135611b668161246d565b600080604083850312156120fd57600080fd5b82356121088161246d565b946020939093013593505050565b60006020828403121561212857600080fd5b81518015158114611b6657600080fd5b60006020828403121561214a57600080fd5b5051919050565b600080600080600080600080610100898b03121561216e57600080fd5b88356121798161246d565b975060208901356121898161246d565b965060408901359550606089013594506080890135935060a0890135925060c08901356121b58161246d565b915060e08901356121c58161246d565b809150509295985092959890939650565b6000602082840312156121e857600080fd5b5035919050565b6000806040838503121561220257600080fd5b8235915060208301356122148161246d565b809150509250929050565b600081518084526122378160208601602086016123b4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161227b8184602087016123b4565b9190910192915050565b600073ffffffffffffffffffffffffffffffffffffffff80881683527fffffffff0000000000000000000000000000000000000000000000000000000087166020840152808616604084015260a060608401526122e560a084018661221f565b91508084166080840152509695505050505050565b602081526000611b66602083018461221f565b600082198211156123205761232061240f565b500190565b60008261235b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156123985761239861240f565b500290565b6000828210156123af576123af61240f565b500390565b60005b838110156123cf5781810151838201526020016123b7565b83811115611c745750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461126e57600080fdfea264697066735822122075aeadc8eb5cb0165fcd9f5e53491d597d70f602565d3de2a4a6e0f4fdbf1b0564736f6c63430008070033a264697066735822122072b589f1785de4598b1aa33e73868382ef0a485ec943b943e8bdf64fba336ec364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/OptionPoolFactory.sol:OptionPoolFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/OptionPoolFactory.sol:OptionPoolFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 172,
        "contract": "contracts/OptionPoolFactory.sol:OptionPoolFactory",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 215,
        "contract": "contracts/OptionPoolFactory.sol:OptionPoolFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 504,
        "contract": "contracts/OptionPoolFactory.sol:OptionPoolFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/OptionPoolFactory.sol:OptionPoolFactory",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 157,
        "contract": "contracts/OptionPoolFactory.sol:OptionPoolFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2622,
        "contract": "contracts/OptionPoolFactory.sol:OptionPoolFactory",
        "label": "getCallOptions",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2625,
        "contract": "contracts/OptionPoolFactory.sol:OptionPoolFactory",
        "label": "allOptions",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}