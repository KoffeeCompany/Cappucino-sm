{
  "language": "Solidity",
  "sources": {
    "contracts/__mocks__/OptionPoolFactoryMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport {CALL, PUT} from \"../constants/COption.sol\";\nimport {OptionPoolMock} from \"./OptionPoolMock.sol\";\n\ncontract OptionPoolFactoryMock {\n    // !!!!!!!!!!!! EVENTS !!!!!!!!!!!!!!!!\n\n    event LogOptionPoolCreation(\n        bytes32 hash,\n        address pool,\n        address base,\n        address short,\n        string optionType,\n        uint256 liquidity,\n        uint256 bcv,\n        uint256 strike,\n        uint256 maturity\n    );\n\n    // !!!!!!!!!!!! EVENTS !!!!!!!!!!!!!!!!\n\n    mapping(bytes32 => address) public optionPools;\n\n    function createOptionPool(\n        address base_,\n        address short_,\n        string memory optionType_,\n        uint256 liquidity_,\n        uint256 bcv_,\n        uint256 strike_,\n        uint256 maturity_\n    ) external {\n        OptionPoolMock optionPool = new OptionPoolMock(\n            base_,\n            short_,\n            optionType_,\n            liquidity_,\n            bcv_,\n            strike_,\n            maturity_\n        );\n        bytes32 hash = keccak256(\n            abi.encode(\n                address(optionPool),\n                base_,\n                short_,\n                optionType_,\n                liquidity_,\n                bcv_,\n                strike_,\n                maturity_\n            )\n        );\n\n        optionPools[hash] = address(optionPool);\n\n        optionPool.transferOwnership(msg.sender);\n\n        emit LogOptionPoolCreation(\n            hash,\n            address(optionPool),\n            base_,\n            short_,\n            optionType_,\n            liquidity_,\n            bcv_,\n            strike_,\n            maturity_\n        );\n    }\n}\n"
    },
    "contracts/constants/COption.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nstring constant CALL = \"CALL\";\nstring constant PUT = \"PUT\";"
    },
    "contracts/__mocks__/OptionPoolMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport {_wdiv, _wmul} from \"../vendor/DSMath.sol\";\nimport {\n    IERC20,\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract OptionPoolMock is Ownable {\n    using SafeERC20 for IERC20;\n\n    // !!!!!!!!!!!!! STRUCTS !!!!!!!!!!!!\n\n    struct Option {\n        uint256 amountOut;\n        uint256 amountIn;\n        uint256 expiry;\n    }\n\n    // !!!!!!!!!!!!! STRUCTS !!!!!!!!!!!!\n\n    // !!!!!!!!!!!!! EVENTS !!!!!!!!!!!!!\n\n    event LogOptionCreation(\n        uint256 indexed id,\n        address indexed pool,\n        address user,\n        uint256 amountOut,\n        uint256 amountIn\n    );\n\n    event LogExercise(address indexed pool, address user, uint256 id);\n\n    // !!!!!!!!!!!!! EVENTS !!!!!!!!!!!!!\n\n    address public immutable base;\n    address public immutable short;\n    string public optionType;\n    uint256 public immutable liquidity;\n    uint256 public immutable bcv;\n    uint256 public immutable strike;\n    uint256 public immutable maturity;\n\n    uint256 public debt;\n    uint256 public debtRatio;\n\n    mapping(address => Option[]) optionsByUser;\n\n    constructor(\n        address base_,\n        address short_,\n        string memory optionType_,\n        uint256 liquidity_,\n        uint256 bcv_,\n        uint256 strike_,\n        uint256 maturity_\n    ) {\n        base = base_;\n        short = short_;\n        optionType = optionType_;\n        liquidity = liquidity_;\n        bcv = bcv_;\n        strike = strike_;\n        maturity = maturity_;\n    }\n\n    // !!!!!!! ADMIN FUNCTION !!!!!!!!!!!!\n\n    function addLiquidity(uint256 addend_) external onlyOwner {\n        IERC20(base).safeTransferFrom(msg.sender, address(this), addend_);\n    }\n\n    // !!!!!!! ADMIN FUNCTION !!!!!!!!!!!!\n\n    // !!!!!!!! USER FUNCTIONS !!!!!!!!!!!\n\n    function createOption(uint256 notional_) external {\n        uint256 premium = getPrice(notional_);\n        uint256 amountOut = _wmul(notional_, strike);\n        debt += amountOut;\n        debtRatio = _wdiv(debt, IERC20(base).balanceOf(address(this)));\n\n        Option memory option = Option({\n            amountOut: amountOut,\n            amountIn: notional_,\n            expiry: block.timestamp + maturity\n        });\n\n        optionsByUser[msg.sender].push(option);\n\n        IERC20(short).safeTransferFrom(msg.sender, address(this), premium);\n\n        emit LogOptionCreation(\n            optionsByUser[msg.sender].length - 1,\n            address(this),\n            msg.sender,\n            amountOut,\n            notional_\n        );\n    }\n\n    function exercise(uint256 id_) external {\n        require(optionsByUser[msg.sender][id_].expiry < block.timestamp);\n\n        IERC20(short).safeTransferFrom(\n            msg.sender,\n            address(this),\n            optionsByUser[msg.sender][id_].amountIn\n        );\n\n        IERC20(base).safeTransfer(\n            msg.sender,\n            optionsByUser[msg.sender][id_].amountOut\n        );\n\n        debt += optionsByUser[msg.sender][id_].amountOut;\n        debtRatio = _wdiv(debt, IERC20(base).balanceOf(address(this)));\n\n        emit LogExercise(address(this), msg.sender, id_);\n    }\n\n    // !!!!!!!! USER FUNCTIONS !!!!!!!!!!!\n\n    // !!!!!!!! VIEW FUNCTION !!!!!!!!!!!!\n\n    function getPrice(uint256 amount_) public view returns (uint256) {\n        if (debtRatio == 0) return strike / 10;\n        return _wmul(_wmul(bcv, debtRatio), amount_);\n    }\n\n    // !!!!!!!! VIEW FUNCTION !!!!!!!!!!!!\n}\n"
    },
    "contracts/vendor/DSMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\n// solhint-disable\nfunction _add(uint256 x, uint256 y) pure returns (uint256 z) {\n    require((z = x + y) >= x, \"ds-math-add-overflow\");\n}\n\nfunction _sub(uint256 x, uint256 y) pure returns (uint256 z) {\n    require((z = x - y) <= x, \"ds-math-sub-underflow\");\n}\n\nfunction _mul(uint256 x, uint256 y) pure returns (uint256 z) {\n    require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n}\n\nfunction _min(uint256 x, uint256 y) pure returns (uint256 z) {\n    return x <= y ? x : y;\n}\n\nfunction _max(uint256 x, uint256 y) pure returns (uint256 z) {\n    return x >= y ? x : y;\n}\n\nfunction _imin(int256 x, int256 y) pure returns (int256 z) {\n    return x <= y ? x : y;\n}\n\nfunction _imax(int256 x, int256 y) pure returns (int256 z) {\n    return x >= y ? x : y;\n}\n\nuint256 constant WAD = 10**18;\nuint256 constant RAY = 10**27;\nuint256 constant QUA = 10**4;\n\n//rounds to zero if x*y < WAD / 2\nfunction _wmul(uint256 x, uint256 y) pure returns (uint256 z) {\n    z = _add(_mul(x, y), WAD / 2) / WAD;\n}\n\n//rounds to zero if x*y < WAD / 2\nfunction _rmul(uint256 x, uint256 y) pure returns (uint256 z) {\n    z = _add(_mul(x, y), RAY / 2) / RAY;\n}\n\n//rounds to zero if x*y < WAD / 2\nfunction _wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\n    z = _add(_mul(x, WAD), y / 2) / y;\n}\n\n//rounds to zero if x*y < RAY / 2\nfunction _rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\n    z = _add(_mul(x, RAY), y / 2) / y;\n}\n\n// This famous algorithm is called \"exponentiation by squaring\"\n// and calculates x^n with x as fixed-point and n as regular unsigned.\n//\n// It's O(log n), instead of O(n) for naive repeated multiplication.\n//\n// These facts are why it works:\n//\n//  If n is even, then x^n = (x^2)^(n/2).\n//  If n is odd,  then x^n = x * x^(n-1),\n//   and applying the equation for even x gives\n//    x^n = x * (x^2)^((n-1) / 2).\n//\n//  Also, EVM division is flooring and\n//    floor[(n-1) / 2] = floor[n / 2].\n//\nfunction _rpow(uint256 x, uint256 n) pure returns (uint256 z) {\n    z = n % 2 != 0 ? x : RAY;\n\n    for (n /= 2; n != 0; n /= 2) {\n        x = _rmul(x, x);\n\n        if (n % 2 != 0) {\n            z = _rmul(z, x);\n        }\n    }\n}\n\n//rounds to zero if x*y < QUA / 2\nfunction _qmul(uint256 x, uint256 y) pure returns (uint256 z) {\n    z = _add(_mul(x, y), QUA / 2) / QUA;\n}\n\n//rounds to zero if x*y < QUA / 2\nfunction _qdiv(uint256 x, uint256 y) pure returns (uint256 z) {\n    z = _add(_mul(x, QUA), y / 2) / y;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/OptionPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport {\n    IERC20,\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {\n    Initializable\n} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {_wmul, _wdiv} from \"./vendor/DSMath.sol\";\nimport {Options, Option} from \"./structs/SOption.sol\";\nimport {IPokeMe} from \"./interfaces/IPokeMe.sol\";\nimport {IOptionPoolFactory} from \"./interfaces/IOptionPoolFactory.sol\";\n\ncontract OptionPool is Ownable, Initializable {\n    using SafeERC20 for IERC20;\n\n    //#region IMMUTABLE PROPERTIES\n    IERC20 public short;\n    IERC20 public base;\n    uint256 public expiryTime;\n    uint256 public strike;\n    //#endregion IMMUTABLE PROPERTIES\n\n    uint256 public timeBeforeDeadLine;\n    uint256 public bcv; // 18 decimal number\n\n    uint256 public debt; // Increase during creation / Decrease during exercise\n    uint256 public debtRatio; //  Call Option Debt Outstanding / Total Supply\n\n    mapping(address => Options) public optionsByReceiver;\n\n    IOptionPoolFactory public optionPoolFactory;\n\n    //#region MODIFIERS\n\n    modifier deadLineBeforeExpiry(\n        uint256 expiryTime_,\n        uint256 timeBeforeDeadLine_\n    ) {\n        require(\n            expiryTime_ > timeBeforeDeadLine_,\n            \"OptionPool::initialize: timeBeforeDeadLine > expiryTime\"\n        );\n        _;\n    }\n\n    //#endregion MODIFIERS\n\n    //#region Events\n\n    event LogOptionPool(\n        address indexed pool,\n        address short,\n        address base,\n        uint256 expiryTime,\n        uint256 strike,\n        uint256 timeBeforeDeadLine,\n        uint256 bcv\n    );\n\n    event LogCreateOption(\n        address indexed pool,\n        uint256 indexed id,\n        address short,\n        address base,\n        uint256 notional,\n        uint256 amountOut,\n        uint256 premium\n    );\n\n    event LogExerciseOption(\n        address indexed pool,\n        uint256 indexed id,\n        uint256 amountIn\n    );\n\n    //#endregion Events\n\n    // !!!!!!!!!!!!! CONSTRUCTOR !!!!!!!!!!!!!!!!\n\n    constructor() Ownable() {\n        optionPoolFactory = IOptionPoolFactory(msg.sender);\n    }\n\n    // !!!!!!!!!!!!! CONSTRUCTOR !!!!!!!!!!!!!!!!\n\n    function initialize(\n        IERC20 short_,\n        IERC20 base_,\n        uint256 expiryTime_,\n        uint256 strike_,\n        uint256 timeBeforeDeadLine_,\n        uint256 bcv_\n    )\n        public\n        initializer\n        deadLineBeforeExpiry(expiryTime_, timeBeforeDeadLine_)\n    {\n        short = short_;\n        base = base_;\n        expiryTime = expiryTime_;\n        strike = strike_;\n        timeBeforeDeadLine = timeBeforeDeadLine_;\n        bcv = bcv_;\n\n        emit LogOptionPool(\n            address(this),\n            address(short_),\n            address(base_),\n            expiryTime_,\n            strike_,\n            timeBeforeDeadLine_,\n            bcv_\n        );\n    }\n\n    //#region ONLY ADMIN\n\n    function addLiquidity(uint256 addend_) external onlyOwner {\n        IERC20(base).safeTransferFrom(msg.sender, address(this), addend_);\n    }\n\n    function setTimeBeforeDeadLine(uint256 timeBeforeDeadLine_)\n        external\n        onlyOwner\n        deadLineBeforeExpiry(expiryTime, timeBeforeDeadLine_)\n    {\n        timeBeforeDeadLine = timeBeforeDeadLine_;\n    }\n\n    function setBCV(uint256 bcv_) external onlyOwner {\n        bcv = bcv_;\n    }\n\n    function increaseTotalSupply(uint256 addend_) external onlyOwner {\n        base.safeTransferFrom(msg.sender, address(this), addend_);\n    }\n\n    //#endregion ONLY ADMIN\n\n    function getPrice(uint256 amount_) public view returns (uint256) {\n        return _wmul(_wmul(bcv, debtRatio), amount_);\n    }\n\n    //#region USER FUNCTIONS CREATE EXERCISE\n\n    function create(uint256 notional_, address receiver_) external {\n        address pool = address(this);\n        Options storage options = optionsByReceiver[receiver_];\n\n        Option memory option = Option({\n            notional: notional_,\n            receiver: receiver_,\n            price: getPrice(notional_),\n            startTime: block.timestamp\n        });\n\n        options.opts[options.nextID] = option;\n        options.nextID++;\n\n        uint256 baseBalance = base.balanceOf(pool);\n\n        debt += notional_;\n        debtRatio = _wdiv(debt, baseBalance);\n\n        require(debt <= baseBalance, \"OptionPool::create: debt > baseBalance.\");\n\n        uint256 balanceB = short.balanceOf(pool);\n\n        short.safeTransferFrom(msg.sender, pool, option.price);\n\n        assert(balanceB + option.price == short.balanceOf(pool));\n\n        emit LogCreateOption(\n            pool,\n            options.nextID,\n            address(short),\n            address(base),\n            notional_,\n            _wmul(strike,notional_),\n            option.price\n        );\n    }\n\n    function exercise(uint256 id_) external {\n        address pool = address(this);\n        Options storage options = optionsByReceiver[msg.sender];\n\n        Option memory option = options.opts[id_];\n\n        require(\n            option.startTime + expiryTime < block.timestamp,\n            \"OptionPool::exercise: not expired.\"\n        );\n\n        require(\n            option.startTime + expiryTime + timeBeforeDeadLine >\n                block.timestamp,\n            \"OptionPool::exercise: deadline reached.\"\n        );\n\n        debt -= option.notional;\n        debtRatio = _wdiv(debt, base.balanceOf(pool) - option.notional);\n\n        uint256 balanceB = short.balanceOf(pool);\n\n        uint256 amountIn = _wmul(option.notional, strike);\n\n        short.safeTransferFrom(msg.sender, pool, amountIn);\n        base.safeTransfer(msg.sender, option.notional);\n\n        assert(balanceB + amountIn == short.balanceOf(pool));\n\n        emit LogExerciseOption(pool, id_, amountIn);\n    }\n\n    //#endregion USER FUNCTIONS CREATE EXERCISE\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/structs/SOption.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nstruct Options {\n    uint256 nextID;\n    Option[] opts;\n}\n\nstruct Option {\n    uint256 notional;\n    address receiver;\n    uint256 price;\n    uint256 startTime;\n}\n"
    },
    "contracts/interfaces/IPokeMe.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.7;\n\ninterface IPokeMe {\n    function createTaskNoPrepayment(\n        address execAddress_,\n        bytes4 execSelector_,\n        address resolverAddress_,\n        bytes calldata resolverData_,\n        address feeToken_\n    ) external returns (bytes32 task);\n\n    function cancelTask(bytes32 taskId_) external;\n\n    function getFeeDetails() external view returns (uint256, address);\n\n    function getResolverHash(\n        address _resolverAddress,\n        bytes memory _resolverData\n    ) external pure returns (bytes32);\n\n    function exec(\n        uint256 _txFee,\n        address _feeToken,\n        address _taskCreator,\n        bool _useTaskTreasuryFunds,\n        bytes32  _resolverHash,\n        address _execAddress,\n        bytes calldata _execData\n    ) external;\n}"
    },
    "contracts/interfaces/IOptionPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\nimport {IPokeMe} from \"../interfaces/IPokeMe.sol\";\n\ninterface IOptionPoolFactory {\n    function pokeMe() external view returns (IPokeMe);\n}"
    },
    "contracts/OptionPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport {\n    IERC20,\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IPokeMe} from \"./interfaces/IPokeMe.sol\";\nimport {OptionPool} from \"./OptionPool.sol\";\n\ncontract OptionPoolFactory {\n    using SafeERC20 for IERC20;\n\n    IPokeMe public immutable pokeMe;\n\n    mapping(bytes32 => address) public getCallOptions;\n    address[] public allOptions;\n\n    event OptionPoolCreated(\n        bytes32 salt,\n        IERC20 indexed short,\n        IERC20 indexed base,\n        uint256 expiryTime,\n        uint256 strike,\n        uint256 timeBeforeDeadLine,\n        uint256 bcv,\n        uint256 initialTotalSupply\n    );\n\n    constructor(IPokeMe pokeMe_) {\n        pokeMe = pokeMe_;\n    }\n\n    function createCallOption(\n        IERC20 short_,\n        IERC20 base_,\n        uint256 expiryTime_,\n        uint256 strike_,\n        uint256 timeBeforeDeadLine_,\n        uint256 bcv_,\n        uint256 initialTotalSupply_\n    ) external returns (address option) {\n        require(\n            short_ != base_,\n            \"Cappucino::OptionFactory:: IDENTICAL_ADDRESSES\"\n        );\n        // (address token0, address token1) = tokenA < tokenB\n        //     ? (tokenA, tokenB)\n        //     : (tokenB, tokenA);\n        bytes32 salt = getSalt(short_, base_, expiryTime_);\n\n        require(\n            address(short_) != address(0),\n            \"Cappucino::OptionFactory:: short token ZERO_ADDRESS\"\n        );\n        require(\n            address(base_) != address(0),\n            \"Cappucino::OptionFactory:: base token ZERO_ADDRESS\"\n        );\n        require(\n            getCallOptions[salt] == address(0),\n            \"Cappucino::OptionFactory:: PAIR_EXISTS\"\n        ); // single check is sufficient\n        bytes memory bytecode = type(OptionPool).creationCode;\n        assembly {\n            option := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        OptionPool(option).initialize(\n            short_,\n            base_,\n            expiryTime_,\n            strike_,\n            timeBeforeDeadLine_,\n            bcv_\n        );\n        OptionPool(option).transferOwnership(msg.sender);\n        getCallOptions[salt] = option;\n        allOptions.push(option);\n\n        base_.safeTransferFrom(msg.sender, address(this), initialTotalSupply_);\n        base_.safeTransfer(option, initialTotalSupply_);\n        emit OptionPoolCreated(\n            salt,\n            short_,\n            base_,\n            expiryTime_,\n            strike_,\n            timeBeforeDeadLine_,\n            bcv_,\n            initialTotalSupply_\n        );\n    }\n\n    function getSalt(\n        IERC20 short_,\n        IERC20 base_,\n        uint256 expiryTime_\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encode(short_, base_, expiryTime_));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/__mocks__/TokenB.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/// @custom:dev 18 decimals token\ncontract TokenB is ERC20 {\n    constructor() ERC20(\"Token B\", \"TKNB\") {\n        _mint(msg.sender, 1e27);\n    }\n}\n"
    },
    "contracts/__mocks__/TokenA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/// @custom:dev 18 decimals token\ncontract TokenA is ERC20 {\n    constructor() ERC20(\"Token A\", \"TKNA\") {\n        _mint(msg.sender, 1e27);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200000
    },
    "modelChecker": {
      "targets": [
        "balance",
        "outOfBounds",
        "popEmptyArray",
        "constantCondition",
        "divByZero",
        "assert",
        "underflow",
        "overflow"
      ],
      "showUnproved": true,
      "engine": "none"
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}